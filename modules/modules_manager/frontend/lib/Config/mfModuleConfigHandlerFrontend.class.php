<?php


class mfModuleConfigHandlerFrontend extends mfModuleConfigHandler {
        
    function execute($configFiles)
    {
        $actionName=$this->getParameters()->get('parameters');
        $prefix = strtolower($this->getParameters()->get('prefix', ''));
        $wildcardValues = $this->getParameters()->get('wildcardValues');
        $config = self::getConfiguration($configFiles,$actionName);
        $moduleName = $wildcardValues ? $wildcardValues[0] : ""; //@TODO pas clair
        $data=array();
        $settings=array();   
        // Module available and valid ?
        $module=new mfModule($moduleName); 
        $module->setInstallerClass('moduleUpdater');     
        if ($module->isInstalled() || $module->isCore())
        {
            $config['enabled']=true;
        }     
        else
        {    
            $config['enabled']=false;
        }    
    /*    if ($module->isUptoDate())
        {
            if (!$module->isCore())
            {
                if (mfModule::isModuleInstalled('modules_manager'))
                {    
                    // Load modules availables
                    $modules=moduleManagerUtilsAdmin::getModules();
                    if (isset($modules[$moduleName]))
                          $config['enabled']=true;
                       else
                           $config['enabled']=false;
                }   
            }
        }    
        else
        {
           $config['enabled']=false; 
        }                                      
      */
      //  $config['enabled']=true;
        
        foreach ($config as $name=>$value)
        {
            switch ($name)
            {
                case 'settings':$data[]=$this->addSettings($value);
                                  break;
                case "helpers";$data[]=$this->addHelpers($value,$moduleName);
                                  break;
                // Module Enable 
                case "enabled":
                    
                    $settings[]= sprintf("  '%s' => %s,", $prefix.$moduleName."_".$name, var_export($value, true));
                               break;
                default: 
                   if ($actionName)
                   { 
                    $settings[]= sprintf("  '%s' => %s,", $prefix.$moduleName."_".$actionName."_".$name, var_export($value, true));
                   }
            }
        } 
        $retval=sprintf("<?php\n" .
                      "// auto-generated by mfModuleConfigHandlerFrontend\n".
                      "// date: %s\n%s\n\nmfConfig::add(array(\n%s));\n",
                      date('Y/m/d H:i:s'),implode("\n",$data),implode("\n",$settings));
        return $retval;
    }
    
 
 /*   public function getConfiguration(array $configFiles,$actionName)
  {
      if ($actionName)
         return parent::getConfiguration($configFiles,$actionName);
      else
      {
        $config = $this->parseConfigFiles($configFiles);
        $config= mfTools::arrayDeepMerge(
           isset($config['default']) && is_array($config['default']) ? $config['default'] : array(),
           isset($config['all']) && is_array($config['all']) ? $config['all'] : array()
         ); 
         return $config; 
      }          
  } */
    
  
}

