<?php

/*
 * Generated by SuperAdmin Generator date : 25/03/13 16:38:07
 */
 
class moduleManagerAdminBase extends mfObject2 {
    
    const table="t_modules_admin"; 
    protected static $fields=array('name','title','description','logo','type','version','is_active','created_at','updated_at',);
    protected static $foreignKeys=array(); 
    protected static $fieldsNull=array(); 
    
  function __construct($parameters=null) {
      parent::__construct();    
    $this->getDefaults();  
    if ($parameters===null) return $this; //$this->getDefaults(); 
      if (is_array($parameters)||$parameters instanceof ArrayAccess)
      {
           if (isset($parameters['id']))
               return $this->loadById((string)$parameters['id']);
          /* if (isset($parameters['name']))
               return $this->loadByName((string)$parameters['name']); */
           return $this->add($parameters); 
      }   
      else
      {
         if (is_numeric((string)$parameters)) 
            return $this->loadbyId((string)$parameters);
         $this->loadByName((string)$parameters);   
        // $this->set('name',(string)$parameters);
      }   
    }
    
    
    
    protected function loadByName($name)
    {
         $this->set('name',$name);
          $db=mfSiteDatabase::getInstance()->setParameters(array($name));
        $db->setQuery("SELECT * FROM ".self::getTable()." WHERE name='%s';")
             ->makeSqlQuery(); 
        return $this->rowtoObject($db);
    }
    
    protected function executeLoadById($db)
    {
         $db->setQuery("SELECT * FROM ".self::getTable()." WHERE ".self::getKeyName()."=%d;")
            ->makeSqlQuerySuperAdmin();    
    }
    
    protected function getDefaults()
    {
    	$this->is_active=isset($this->is_active)?$this->is_active:"NO";
	$this->updated_at=isset($this->updated_at)?$this->updated_at:date("Y-m-d H:i:s");
        $this->created_at=isset($this->created_at)?$this->created_at:date("Y-m-d H:i:s");
    }
    
    protected function executeInsertQuery($db)
    {
         $db->makeSqlQuerySuperAdmin();   
    }
    
    function getValuesForUpdate()
    {
          
    }   
    
    protected function executeUpdateQuery($db)
    {
       $db->setQuery("UPDATE ".self::getTable()." SET " . $this->getFieldsForUpdate() . " WHERE ".self::getKeyName()."=%d ;")
          ->makeSqlQuerySuperAdmin();       
    }
    
    protected function executeDeleteQuery($db)
    {
        $db->setQuery("DELETE FROM ".self::getTable()." WHERE ".self::getKeyName()."=%d;")
           ->makeSqlQuerySuperAdmin();       
    }
    
    protected function executeIsExistQuery($db)    
    {
      
      $key_condition=($this->getKey())?" AND ".self::getKeyName()."!='%s';":"";
      $db->setParameters(array('name'=>$this->name,$this->getKey()))
         ->setQuery("SELECT ".self::getKeyName()." FROM ".self::getTable()." WHERE (name='{name}')".$key_condition)
         ->makeSqlQuerySuperAdmin();   
    }
    
    /*
     * Getter Methods
     */
    function getId()
    {
      return $this->id;
    }
    
        function getName()
    {
      return $this->name;
    }
    
            function getType()
    {
      return $this->type;
    }
    
        function getVersion()
    {
      return $this->version;
    }
    
        function getIsActive()
    {
      return $this->is_active;
    }
    
        function getCreatedAt()
    {
      return $this->created_at;
    }
    
        function getUpdatedAt()
    {
      return $this->updated_at;
    }
    
          
    
    /*
     * Working directory data
     */
    public function getCoreDirectory()
    {
       // return mfConfig::get('mf_sites_dir')."/".$this->getSiteName()."/frontend/view/data/moduleManagerAdmins/".$this->get('id');
        return mfConfig::get('mf_modules_dir')."/".$this->get('name');
    }
    
    /************** Pictures *****************************************************************/
                                        
       public function deleteLogo()
       {
        $this->getLogo()->remove(); 
        $this->set('logo','');
        $this->save();
       }
    
       public function getLogo()
       {
         if (!$this->get('_logo'))      
            $this->_logo=new PictureObject2(array(
                 "path"=>mfConfig::get('mf_modules_dir').'/'.$this->get('name').'/common/view/pictures/',
                 "picture"=>$this->get('logo'),           
                 "url"=>url('/module/'.$this->get('name').'/pictures/'."/".$this->get('logo'),"web")
               
             ));
      return $this->_logo;     
      }
                                                                     
    /*
     * Foreign keys Methods
     */
                                                                                        

    protected function  getConfigFilePath()
    {
       return mfConfig::get('mf_modules_dir').'/'.$this->get('name')."/config.xml"; 
    }
    
    function setConfigFromFile()  
    { 
      if (!$this->get('name'))
           return ;
      $file=new File($this->getConfigFilePath());
      if (!$file->isExist())
         return $this;
      $xml=simplexml_load_file($file->getFile());
      if (!$xml)
          return $this;
      $this->add(array('version'=>$xml->version,
                       'type'=>$xml->type,
                       'logo'=>$xml->logo,
                       'title'=>$xml->title,
                       'description'=>$xml->description,
                       'mode'=>$xml->mode,
                       'dependencies'=>$xml->dependencies
                ));
      return $this;
    }  
    
    function hasConfigFile()
    {
      $file=new File($this->getConfigFilePath());
      return $file->isExist();
    }
    
}



